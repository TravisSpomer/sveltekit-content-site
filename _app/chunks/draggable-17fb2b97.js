const t=function(){let t=!1;try{const s=Object.defineProperty({},"passive",{get:()=>{t=!0}});window.addEventListener("__testevent",null,s)}catch(s){}return t}();window.PointerEvent||console.error("Pointer events aren't supported by this browser, so drag functionality won't work.  Please update your browser.");class s{constructor(s,e,i){this._isReusable=!1,this._isDragging=!1,this.onPointerDown=t=>{if(this._isDragging)return;if(!t.isPrimary||0!==t.button)return;const s=this._options;if(s.onTryStart){const e={cancel:!1,pointerEvent:t};if(s.onTryStart(e),e.cancel)return;void 0!==e.data&&(this._options.data=e.data)}this.startDrag(t),t.preventDefault},this.onPointerUp=t=>{if(!this._isDragging)return;if(!t.isPrimary||0!==t.button)return;const s=this.buildDragTrackerEventArgs(t);this._options.onUpdate(s),this._options.onFinish(s),this._parent.releasePointerCapture(t.pointerId),t.preventDefault(),this.cleanup()},this.onPointerMove=t=>{this._isDragging&&this._options.onUpdate(this.buildDragTrackerEventArgs(t))},this.onLostPointerCapture=t=>{if(!this._isDragging)return;const s=this.buildDragTrackerEventArgs(t,!0);this._options.onUpdate(s),this._options.onFinish(s),this.cleanup()},this._parent=s,this._options=i;const n=t?{passive:!0}:void 0;e?this.startDrag(e):(this._isReusable=!0,s.addEventListener("pointerdown",this.onPointerDown),s.style.touchAction="none"),s.addEventListener("pointerup",this.onPointerUp),s.addEventListener("pointermove",this.onPointerMove,n),s.addEventListener("lostpointercapture",this.onLostPointerCapture,n)}cleanup(){this._isDragging&&(this._isDragging=!1,this._isReusable||(this._parent.removeEventListener("pointerup",this.onPointerUp),this._parent.removeEventListener("pointermove",this.onPointerMove),this._parent.removeEventListener("lostpointercapture",this.onLostPointerCapture)))}startDrag(t){this._isDragging=!0,this._parent.setPointerCapture(t.pointerId),this._dragOriginX=t.clientX,this._dragOriginY=t.clientY}buildDragTrackerEventArgs(t,s=!1){return{dx:t.clientX-this._dragOriginX,dy:t.clientY-this._dragOriginY,data:this._options.data,isCancelled:s}}}window.PointerEvent||console.error("Pointer events aren't supported by this browser, so drag functionality won't work.  Please update your browser.");class e{constructor(e,i=e,n=e){this.parentElement=e,this._position={x:0,y:0},this.setIsHovering=t=>{t!==this._isHovering&&(this._isHovering=t,t?this._setClassesOn.classList.add("hover"):this._setClassesOn.classList.remove("hover"))},this.setIsDragging=t=>{t!==this._isDragging&&(this._isDragging=t,t?this._setClassesOn.classList.add("drag"):this._setClassesOn.classList.remove("drag"))},this.updateTransform=(t,s)=>{this._parent.style.transform=`translate(${this._position.x+t}px, ${this._position.y+s}px)`},this.onPointerEnter=t=>{this.setIsHovering(!0)},this.onPointerLeave=t=>{this.setIsHovering(!1)},this._parent=e,this._dragHandle=i,this._setClassesOn=n,i.style.cursor="all-scroll",i.style.userSelect="none",console.assert(""===e.style.transform,"Don't make an element draggable if it already has a transform applied!");const r=t?{passive:!0}:void 0;i.addEventListener("pointerenter",this.onPointerEnter,r),i.addEventListener("pointerleave",this.onPointerLeave,r),function(t,e){new s(t,null,e)}(this._dragHandle,{onTryStart:()=>(this.setIsDragging(!0),!0),onUpdate:t=>this.updateTransform(t.dx,t.dy),onFinish:t=>{this.setIsDragging(!1),this._position.x+=t.dx,this._position.y+=t.dy,this.updateTransform(0,0)}})}}function i(t,s=t,i=t){new e(t,s,i)}export{i as makeDraggable};
